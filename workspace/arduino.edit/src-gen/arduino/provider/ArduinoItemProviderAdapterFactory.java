/**
 */
package arduino.provider;

import arduino.util.ArduinoAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ArduinoItemProviderAdapterFactory extends ArduinoAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ArduinoItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.Sketch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SketchItemProvider sketchItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.Sketch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSketchAdapter() {
		if (sketchItemProvider == null) {
			sketchItemProvider = new SketchItemProvider(this);
		}

		return sketchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.Led} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LedItemProvider ledItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.Led}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLedAdapter() {
		if (ledItemProvider == null) {
			ledItemProvider = new LedItemProvider(this);
		}

		return ledItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.LDR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LDRItemProvider ldrItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.LDR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLDRAdapter() {
		if (ldrItemProvider == null) {
			ldrItemProvider = new LDRItemProvider(this);
		}

		return ldrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.Apagar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApagarItemProvider apagarItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.Apagar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApagarAdapter() {
		if (apagarItemProvider == null) {
			apagarItemProvider = new ApagarItemProvider(this);
		}

		return apagarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.Variar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariarItemProvider variarItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.Variar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariarAdapter() {
		if (variarItemProvider == null) {
			variarItemProvider = new VariarItemProvider(this);
		}

		return variarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.Esperar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EsperarItemProvider esperarItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.Esperar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEsperarAdapter() {
		if (esperarItemProvider == null) {
			esperarItemProvider = new EsperarItemProvider(this);
		}

		return esperarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.Encender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EncenderItemProvider encenderItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.Encender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEncenderAdapter() {
		if (encenderItemProvider == null) {
			encenderItemProvider = new EncenderItemProvider(this);
		}

		return encenderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.If} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfItemProvider ifItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.If}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfAdapter() {
		if (ifItemProvider == null) {
			ifItemProvider = new IfItemProvider(this);
		}

		return ifItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.While} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileItemProvider whileItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.While}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhileAdapter() {
		if (whileItemProvider == null) {
			whileItemProvider = new WhileItemProvider(this);
		}

		return whileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.Temperatura} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemperaturaItemProvider temperaturaItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.Temperatura}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemperaturaAdapter() {
		if (temperaturaItemProvider == null) {
			temperaturaItemProvider = new TemperaturaItemProvider(this);
		}

		return temperaturaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.Potenciometro} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PotenciometroItemProvider potenciometroItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.Potenciometro}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPotenciometroAdapter() {
		if (potenciometroItemProvider == null) {
			potenciometroItemProvider = new PotenciometroItemProvider(this);
		}

		return potenciometroItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.Boton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BotonItemProvider botonItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.Boton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBotonAdapter() {
		if (botonItemProvider == null) {
			botonItemProvider = new BotonItemProvider(this);
		}

		return botonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.PIR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PIRItemProvider pirItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.PIR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPIRAdapter() {
		if (pirItemProvider == null) {
			pirItemProvider = new PIRItemProvider(this);
		}

		return pirItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.Buzzer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuzzerItemProvider buzzerItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.Buzzer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuzzerAdapter() {
		if (buzzerItemProvider == null) {
			buzzerItemProvider = new BuzzerItemProvider(this);
		}

		return buzzerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduino.Servo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServoItemProvider servoItemProvider;

	/**
	 * This creates an adapter for a {@link arduino.Servo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServoAdapter() {
		if (servoItemProvider == null) {
			servoItemProvider = new ServoItemProvider(this);
		}

		return servoItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (sketchItemProvider != null)
			sketchItemProvider.dispose();
		if (ledItemProvider != null)
			ledItemProvider.dispose();
		if (ldrItemProvider != null)
			ldrItemProvider.dispose();
		if (apagarItemProvider != null)
			apagarItemProvider.dispose();
		if (variarItemProvider != null)
			variarItemProvider.dispose();
		if (esperarItemProvider != null)
			esperarItemProvider.dispose();
		if (encenderItemProvider != null)
			encenderItemProvider.dispose();
		if (ifItemProvider != null)
			ifItemProvider.dispose();
		if (whileItemProvider != null)
			whileItemProvider.dispose();
		if (temperaturaItemProvider != null)
			temperaturaItemProvider.dispose();
		if (potenciometroItemProvider != null)
			potenciometroItemProvider.dispose();
		if (botonItemProvider != null)
			botonItemProvider.dispose();
		if (pirItemProvider != null)
			pirItemProvider.dispose();
		if (buzzerItemProvider != null)
			buzzerItemProvider.dispose();
		if (servoItemProvider != null)
			servoItemProvider.dispose();
	}

}
